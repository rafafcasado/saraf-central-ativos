
<div class="kt-content  kt-grid__item kt-grid__item--fluid" id="permissoes-list">
    <div class="kt-portlet kt-portlet--mobile">
        <div class="kt-portlet__head kt-portlet__head--lg">
            <div class="kt-portlet__head-label">
                <span class="kt-portlet__head-icon">
                    <i class="fas fa-key text-primary"></i>
                </span>
                <h3 class="kt-portlet__head-title">
                    Lista de Permissões
                </h3>
            </div>
        </div>
        <div class="kt-portlet__body">

            <!--begin: Datatable -->
            <div id="kt_table_1_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                <div class="row">
                    <div class="col-sm-12">

                        <h3>{{perfil.Nome}}</h3>

                        <table class="table table-striped- table-bordered table-hover table-checkable dataTable no-footer collapsed text-center" id="kt_table_1" role="grid" aria-describedby="kt_table_1_info">
                            <thead>
                                <tr role="row">
                                    <th>Funcionalidade</th>
                                    <th>Listar</th>
                                    <th>Incluir</th>
                                    <th>Editar</th>
                                    <th>Excluir</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr role="row" v-for="req in requisicoes">
                                    <td align="center">{{req.funcionalidade}}</td>
                                    <td align="center"><input type="checkbox" v-if="req.metodos.indexOf('GET') >= 0" v-bind:checked="req.metodosPermitidos.indexOf('GET') >= 0" v-on:click="atualizarPermissao(req.funcionalidade, 'GET')" /></td>
                                    <td align="center"><input type="checkbox" v-if="req.metodos.indexOf('POST') >= 0" v-bind:checked="req.metodosPermitidos.indexOf('POST') >= 0" v-on:click="atualizarPermissao(req.funcionalidade, 'POST')" /></td>
                                    <td align="center"><input type="checkbox" v-if="req.metodos.indexOf('PUT') >= 0" v-bind:checked="req.metodosPermitidos.indexOf('PUT') >= 0" v-on:click="atualizarPermissao(req.funcionalidade, 'PUT')" /></td>
                                    <td align="center"><input type="checkbox" v-if="req.metodos.indexOf('DELETE') >= 0" v-bind:checked="req.metodosPermitidos.indexOf('DELETE') >= 0" v-on:click="atualizarPermissao(req.funcionalidade, 'DELETE')" /></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <hr /><br /><br />

                <div class="row">
                    <div class="col-sm-12">

                        <h3>Configuração de Menu</h3>

                        <table class="table table-striped- table-bordered table-hover table-checkable dataTable no-footer collapsed text-center" id="tbMenuADM" role="grid" aria-describedby="kt_table_1_info">
                            <thead>
                                <tr>
                                    <th colspan="3" style="text-align: left">Administrador</th>
                                </tr>
                                <tr>
                                    <th></th>
                                    <th>Título do Menu</th>
                                    <th>Descrição</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="menu in menuADM">
                                    <td><input type="checkbox" v-bind:checked="menu.temPermissao" v-on:change="habilitarMenu(menu.ID, !menu.temPermissao)" /></td>
                                    <td align="center">{{menu.TituloMenu}}</td>
                                    <td align="left">{{menu.Descricao}}</td>
                                </tr>
                            </tbody>
                            <thead>
                                <tr>
                                    <th colspan="3" style="text-align: left">Empresa</th>
                                </tr>
                                <tr>
                                    <th></th>
                                    <th>Título do Menu</th>
                                    <th>Descrição</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="menu in menuEmpresa">
                                    <td><input type="checkbox" v-bind:checked="menu.temPermissao" v-on:change="habilitarMenu(menu.ID, !menu.temPermissao)" /></td>
                                    <td align="center">{{menu.TituloMenu}}</td>
                                    <td align="left">{{menu.Descricao}}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!--end: Datatable -->
        </div>
        <div class="kt-portlet__foot">
            <div class="kt-form__actions">
                <button type="button" class="btn btn-danger" onclick="history.go(-1)">Voltar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">

        new Vue({
            el: '#permissoes-list',
            data() {
                return {
                    perfil: {},
                    permissao: {
                        PerfilID: 0,
                        Funcionalidade: '',
                        Metodo: ''
                    },
                    requisicoes: [],
                    menuADM: [],
                    menuEmpresa: [],
                    menuPerfil: [],
                    errors: {}
                };
            },

            methods: {

                dadosPerfil(id) {

                    api.get('perfil/' + id, true)
                        .then(({ data, errors }) => {
                            this.errors = errors || {};
                            if (errors) {
                                return;
                            }
                            this.perfil = data;
                        });
                },

                listar(id) {

                    api.get('requisicao/getRequisicoes/' + id, true)
                        .then(({ data, errors }) => {
                            this.errors = errors || {};
                            if (errors) {
                                return;
                            }
                            this.requisicoes = data;
                        });

                },

                atualizarPermissao(funcionalidade, metodo) {

                    let self = this;

                    self.permissao.PerfilID = self.perfil.ID;
                    self.permissao.Funcionalidade = funcionalidade;
                    self.permissao.Metodo = metodo;

                    axios.request({
                        url: config.baseURL + 'permissao',
                        method: 'put',
                        headers: {
                            "Authorization": "Bearer " + JSON.parse(window.localStorage.getItem('token'))
                        },
                        data: (self.permissao)
                    }).then(function () {
                        Swal.fire({
                            type: 'success',
                            title: 'Parabéns',
                            text: 'Permissão Atualizada com Sucesso',
                            showConfirmButton: false,
                            timer: 2000,
                            onClose: () => {
                                clearInterval(timerInterval);
                                self.listar(self.perfil.ID);
                            }
                        });
                    }).catch(function (erro) {

                        Swal.fire({
                            type: 'error',
                            title: 'Erro',
                            text: erro.response.data.Message
                        });
                    });
                },

                listarMenus() {

                    api.get('menu/getMenus', true)
                        .then(({ data, errors }) => {

                            this.errors = errors || {};

                            if (errors) {
                                return;
                            }

                            for (var i = 0; i < data.length; i++) {

                                data[i].temPermissao = false;
                            }

                            this.menuADM = data.filter(x => { return x.TipoMenu == 1 });
                            this.menuEmpresa = data.filter(x => { return x.TipoMenu == 2 });

                            this.listarMenusPerfil();

                        });
                },

                listarMenusPerfil() {

                    let self = this;

                    api.get('menu/getbyperfilid/' + self.perfil.ID, true)
                        .then(({ data, errors }) => {
                            self.errors = errors || {};
                            if (errors) {
                                return;
                            }

                            self.menuPerfil = data;

                            for (var i = 0; i < self.menuADM.length; i++) {

                                self.menuADM[i].temPermissao = data.filter(x => { return x.MenuID == self.menuADM[i].ID }).length == 0 ? false : true;
                            }

                            for (var i = 0; i < self.menuEmpresa.length; i++) {

                                self.menuEmpresa[i].temPermissao = data.filter(x => { return x.MenuID == self.menuEmpresa[i].ID }).length == 0 ? false : true;
                            }
                        });
                },

                habilitarMenu(menuID, habilitar) {

                    let self = this;

                    let url = config.baseURL;
                    let metodo = '';
                    let data = {};
                    let msgRetorno = ';'

                    if (habilitar) {

                        url += 'perfilMenu';
                        metodo = 'post';
                        data = { MenuID: menuID, PerfilID: self.perfil.ID };
                        msgRetorno = 'Menu habilitado com sucesso!';
                    }
                    else {

                        url += 'perfilmenu/delete/' + menuID + '/' + self.perfil.ID
                        metodo = 'delete';
                        msgRetorno = 'Menu desabilitado com sucesso!';
                    }

                    axios.request({
                        url: url,
                        method: metodo,
                        headers: {
                            "Authorization": "Bearer " + JSON.parse(window.localStorage.getItem('token'))
                        },
                        data: (data)
                    }).then(function () {
                        Swal.fire({
                            type: 'success',
                            title: 'Parabéns',
                            text: msgRetorno,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }).catch(function (erro) {

                        Swal.fire({
                            type: 'error',
                            title: 'Erro',
                            text: erro.response.data.Message
                        });
                    });
                }
            },
            mounted() {

                const id = this.getId();

                if (id) {

                    this.dadosPerfil(id);
                    this.listar(id);
                    this.listarMenus();
                }

                let self = this;

                api.get('permissao/getByFuncionalidade/perfil', true)
                    .then(({ data, errors }) => {
                        this.errors = errors || {};
                        if (errors) {
                            return;
                        }

                        if (data.indexOf('PUT') < 0) {

                            Swal.fire({
                                type: 'warning',
                                title: 'Acesso Negado',
                                html: 'Você não tem acesso à essa funcionalidade.</br>Entre em contato com o Administrador do Sistema',
                                showConfirmButton: false,
                                timer: 5000,
                                onClose: () => {

                                    history.go('-1');
                                }
                            });
                        }

                    });
            }
        });

    </script>
}